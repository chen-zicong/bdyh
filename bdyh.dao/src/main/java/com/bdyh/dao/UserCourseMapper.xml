<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bdyh.dao.UserCourseMapper" >
  <resultMap id="BaseResultMap" type="com.bdyh.entity.UserCourse" >
    <constructor >
      <idArg column="ucid" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="openid" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="course_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="pay" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="trade_no" jdbcType="VARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <resultMap id="BaseResultMap2" type="com.bdyh.entity.UserCourseVo" >
    <!-- 用户收藏课程 -->
    <id column="ucid" property="ucid" jdbcType="INTEGER" />
    <result column="openid" property="openid" jdbcType="VARCHAR" />
    <result column="course_id" property="courseId" jdbcType="INTEGER" />
    <result column="pay" property="pay" jdbcType="INTEGER" />

    <!-- 课程集合-->
    <!--
 <collection property="courseList" ofType="com.bdyh.entity.Course">

 </collection>
 -->

    <!-- 课程对象 -->
    <association property="course" javaType="com.bdyh.entity.Course">
      <id column="course_id" property="courseId" jdbcType="INTEGER" />
      <result column="teacher_id" property="teacherId" jdbcType="INTEGER" />
      <result column="lession_num" property="lessionNum" jdbcType="INTEGER" />
      <result column="course_level" property="courseLevel" jdbcType="INTEGER" />
      <result column="course_price" property="coursePrice" jdbcType="DOUBLE" />
      <result column="course_desc" property="courseDesc" jdbcType="VARCHAR" />
      <result column="course_img" property="courseImg" jdbcType="VARCHAR" />
      <result column="course_intro" property="courseIntro" jdbcType="VARCHAR" />
      <result column="course_name" property="courseName" jdbcType="VARCHAR" />
      <result column="course_recommend" property="courseRecommend" jdbcType="INTEGER" />
      <result column="course_difficulty" property="courseDifficulty" jdbcType="INTEGER" />
      <result column="course_type" property="courseType" jdbcType="VARCHAR" />
      <result column="district_id" property="districtId" jdbcType="INTEGER" />
      <result column="status" property="status" jdbcType="INTEGER" />
      <result column="collect_number" property="collectNumber" jdbcType="INTEGER" />
      <result column="flow_number" property="flowNumber" jdbcType="INTEGER" />
    </association>
  </resultMap>
  <sql id="Example_Where_Clause" >

    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ucid, openid, course_id, pay, trade_no
  </sql>
  <sql id="Base_Column_List2" >
    t.ucid,t.openid,t.pay,c.*
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.bdyh.entity.UserCourseExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_course
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user_course
    where ucid = #{ucid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user_course
    where ucid = #{ucid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.bdyh.entity.UserCourseExample" >
    delete from user_course
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.bdyh.entity.UserCourse" >
    insert into user_course (ucid, openid, course_id, 
      pay, trade_no)
    values (#{ucid,jdbcType=INTEGER}, #{openid,jdbcType=VARCHAR}, #{courseId,jdbcType=INTEGER}, 
      #{pay,jdbcType=INTEGER}, #{tradeNo,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.bdyh.entity.UserCourse" >
    insert into user_course
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="ucid != null" >
        ucid,
      </if>
      <if test="openid != null" >
        openid,
      </if>
      <if test="courseId != null" >
        course_id,
      </if>
      <if test="pay != null" >
        pay,
      </if>
      <if test="tradeNo != null" >
        trade_no,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="ucid != null" >
        #{ucid,jdbcType=INTEGER},
      </if>
      <if test="openid != null" >
        #{openid,jdbcType=VARCHAR},
      </if>
      <if test="courseId != null" >
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="pay != null" >
        #{pay,jdbcType=INTEGER},
      </if>
      <if test="tradeNo != null" >
        #{tradeNo,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.bdyh.entity.UserCourseExample" resultType="java.lang.Integer" >
    select count(*) from user_course
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update user_course
    <set >
      <if test="record.ucid != null" >
        ucid = #{record.ucid,jdbcType=INTEGER},
      </if>
      <if test="record.openid != null" >
        openid = #{record.openid,jdbcType=VARCHAR},
      </if>
      <if test="record.courseId != null" >
        course_id = #{record.courseId,jdbcType=INTEGER},
      </if>
      <if test="record.pay != null" >
        pay = #{record.pay,jdbcType=INTEGER},
      </if>
      <if test="record.tradeNo != null" >
        trade_no = #{record.tradeNo,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update user_course
    set ucid = #{record.ucid,jdbcType=INTEGER},
      openid = #{record.openid,jdbcType=VARCHAR},
      course_id = #{record.courseId,jdbcType=INTEGER},
      pay = #{record.pay,jdbcType=INTEGER},
      trade_no = #{record.tradeNo,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.bdyh.entity.UserCourse" >
    update user_course
    <set >
      <if test="openid != null" >
        openid = #{openid,jdbcType=VARCHAR},
      </if>
      <if test="courseId != null" >
        course_id = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="pay != null" >
        pay = #{pay,jdbcType=INTEGER},
      </if>
      <if test="tradeNo != null" >
        trade_no = #{tradeNo,jdbcType=VARCHAR},
      </if>
    </set>
    where ucid = #{ucid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bdyh.entity.UserCourse" >
    update user_course
    set openid = #{openid,jdbcType=VARCHAR},
      course_id = #{courseId,jdbcType=INTEGER},
      pay = #{pay,jdbcType=INTEGER},
      trade_no = #{tradeNo,jdbcType=VARCHAR}
    where ucid = #{ucid,jdbcType=INTEGER}
  </update>







  <select id="findCourseOfUser" resultMap="BaseResultMap2" parameterType="java.lang.String">
    select
    <include refid="Base_Column_List2"/>
    from (select * from user_course where openid=#{openid}) t,course c
    <where>
      t.course_id=c.course_id
    </where>
  </select>

  <select id="findUnPayCourseOfUser" resultMap="BaseResultMap2" parameterType="java.lang.String">
    select
    <include refid="Base_Column_List2"/>
    from (select * from user_course where openid=#{openid} and pay=0) t,course c
    <where>
      t.course_id=c.course_id and c.course_price>0
    </where>
  </select>

  <select id="findPayedCourseOfUser" resultMap="BaseResultMap2" parameterType="java.lang.String">
    select
    <include refid="Base_Column_List2"/>
    from (select * from user_course where openid=#{openid} and pay=1) t,course c
    <where>
      t.course_id=c.course_id and c.course_price>0
    </where>
  </select>

</mapper>